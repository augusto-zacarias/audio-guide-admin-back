generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
	username 	String	@id 
	password	String
	isAdmin		Boolean
}

model point {
  id               Int                @id @default(autoincrement())
  latitude         Float
  longitude        Float
  address          String
  entry_price      Float?             @db.Real
  email            String?
  phone            String?
  point_type_id    Int?
  should_contact   Boolean?           @default(false)
  day1             String?            @db.VarChar
  day2             String?            @db.VarChar
  day3             String?            @db.VarChar
  day4             String?            @db.VarChar
  day5             String?            @db.VarChar
  day6             String?            @db.VarChar
  day7             String?            @db.VarChar
  accessible       Boolean?           @default(false)
  point_type       point_type?        @relation(fields: [point_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  point_audio      point_audio[]
  point_image      point_image[]
  point_name       point_name[]
  point_tag        point_tag[]
  point_transcript point_transcript[]
}

model point_audio {
  id                                      String   @id @default(uuid()) @db.Uuid
  point_id                                Int
  language                                String   @db.VarChar(30)
  duration                                Int?
  language_point_audio_languageTolanguage language @relation("point_audio_languageTolanguage", fields: [language], references: [name], onDelete: NoAction, onUpdate: NoAction)
  point                                   point    @relation(fields: [point_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([point_id, language])
}

model point_image {
  id       String  @id @default(uuid()) @db.Uuid
  point_id Int
  credits  String?
  point    point   @relation(fields: [point_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model point_name {
  id                                     Int      @id @default(autoincrement())
  point_id                               Int
  language                               String   @db.VarChar(30)
  name                                   String?  @db.VarChar(100)
  language_point_name_languageTolanguage language @relation("point_name_languageTolanguage", fields: [language], references: [name], onDelete: NoAction, onUpdate: NoAction)
  point                                  point    @relation(fields: [point_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([point_id, language])
}

model point_tag {
  id       Int   @id @default(autoincrement())
  point_id Int
  tag_id   Int?
  point    point @relation(fields: [point_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag      tag?  @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([point_id, tag_id])
}

model point_transcript {
  id                                           Int      @id @default(autoincrement())
  point_id                                     Int
  language                                     String   @db.VarChar(30)
  text                                         String
  duration                                     Int?
  language_point_transcript_languageTolanguage language @relation("point_transcript_languageTolanguage", fields: [language], references: [name], onDelete: NoAction, onUpdate: NoAction)
  point                                        point    @relation(fields: [point_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([point_id, language])
}

model point_type {
  id    Int     @id @default(autoincrement())
  point point[]
}

model point_type_language {
  id                                              Int      @id @default(autoincrement())
  point_type_id                                   Int?
  language                                        String   @db.VarChar(30)
  name                                            String?  @db.VarChar(30)
  language_point_type_language_languageTolanguage language @relation("point_type_language_languageTolanguage", fields: [language], references: [name], onDelete: NoAction, onUpdate: NoAction)

  @@unique([point_type_id, language])
}

model schema_migrations {
  version BigInt  @id
  dirty   Boolean
}

model tag {
  id           Int            @id @default(autoincrement())
  point_tag    point_tag[]
  tag_language tag_language[]
}

model tag_language {
  id                                       Int      @id @default(autoincrement())
  tag_id                                   Int
  language                                 String   @db.VarChar(30)
  name                                     String   @db.VarChar(30)
  language_tag_language_languageTolanguage language @relation("tag_language_languageTolanguage", fields: [language], references: [name], onDelete: NoAction, onUpdate: NoAction)
  tag                                      tag      @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tag_id, language])
}

model language {
  id                                                         Int                   @id @default(autoincrement())
  name                                                       String                @unique @db.VarChar(30)
  point_audio_point_audio_languageTolanguage                 point_audio[]         @relation("point_audio_languageTolanguage")
  point_name_point_name_languageTolanguage                   point_name[]          @relation("point_name_languageTolanguage")
  point_transcript_point_transcript_languageTolanguage       point_transcript[]    @relation("point_transcript_languageTolanguage")
  point_type_language_point_type_language_languageTolanguage point_type_language[] @relation("point_type_language_languageTolanguage")
  tag_language_tag_language_languageTolanguage               tag_language[]        @relation("tag_language_languageTolanguage")
}